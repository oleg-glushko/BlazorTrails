@page "/add-trail"
@attribute [Authorize]

@using BlazingTrails.Shared.Features.ManageTrails.AddTrail
@using BlazingTrails.Shared.Features.ManageTrails.Shared
@using BlazingTrails.Client.Features.ManageTrails.Shared

@inject IMediator Mediator

<PageTitle>Add Trail - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Add Trail</li>
    </ol>
</nav>

<h3 class="mt-4 mb-5">Add a trail</h3>

@if (_submitSuccessful)
{
    <SuccessAlert Message="Your trail has been submitted successfully!" />
} else if (_errorMessage is not null)
{
    
    <ErrorAlert Message="@_errorMessage" />
}

<TrailForm @ref="_trailForm" OnSubmit="SubmitNewTrail" />

@code {
    private bool _submitSuccessful;
    private string? _errorMessage;
    private TrailForm _trailForm = null!;

    private async Task SubmitNewTrail(TrailDto trail, IBrowserFile? image)
    {
        var response = await Mediator.Send(new AddTrailRequest(trail));

        if (response is null || response.TrailId == -1)
        {
            _errorMessage = "There was a problem saving your trail.";
            _submitSuccessful = false;
            StateHasChanged();
            return;
        }

        if (image is null)
        {
            _submitSuccessful = true;
            _errorMessage = null;
            StateHasChanged();
            return;
        }

        _submitSuccessful = await ProcessImage(response.TrailId, image);
        if (_submitSuccessful)
            _trailForm.ResetForm();

        StateHasChanged();
    }

    private async Task<bool> ProcessImage(int trailId, IBrowserFile trailImage)
    {
        var imageUploadResponse = await Mediator.Send(new UploadTrailImageRequest(trailId, trailImage!));

        if (string.IsNullOrWhiteSpace(imageUploadResponse.ImageName))
        {
            _errorMessage = "Your trail was saved, but there was a problem uploading the image.";
            return false;
        }

        return true;
    }
}